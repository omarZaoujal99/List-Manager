{"version":3,"sources":["insertUpdate.js","App.js","index.js"],"names":["MsgEmptyOrClear","localStorage","length","className","onClick","handleClearAll","List","props","name","edit_key_name","key_name","val_name","handleButtonEdit","icon","faEdit","del_key_name","handleButtonDelete","faTrashAlt","handleAddClick","e","document","getElementById","value","msgAlert","querySelector","style","display","displayOffAlert","backgroundColor","children","innerHTML","currentTarget","getAttribute","setItem","window","location","reload","genRandName","keyName","removeItem","btnEdit","setAttribute","clear","elmnt","periode","setTimeout","chars","i","randChar","Math","floor","random","substring","Cruid","names","push","getItem","key","type","id","placeholder","map","v","App","ReactDOM","render"],"mappings":"wKA4CMA,EAAkB,WACpB,OAAGC,aAAaC,OAAS,EACd,wBAAQC,UAAU,cAAcC,QAASC,EAAzC,6BAEC,oBAAIF,UAAU,UAAd,kCAIVG,EAAO,SAACC,GACV,OACI,mCACI,sBAAKJ,UAAU,UAAf,UACI,4BAAII,EAAMC,OACV,wBAAQL,UAAU,UAAUM,cAAeF,EAAMG,SAAUC,SAAUJ,EAAMC,KAAMJ,QAASQ,EAA1F,SACI,cAAC,IAAD,CAAiBC,KAAMC,QAE3B,wBAAQX,UAAU,YAAYY,aAAcR,EAAMG,SAAUN,QAASY,EAArE,SACI,cAAC,IAAD,CAAiBH,KAAMI,cAQrCC,EAAiB,SAACC,GACpB,IAAMX,EAAOY,SAASC,eAAe,WAAWC,MAC1CC,EAAWH,SAASI,cAAc,gBAErB,IAAhBhB,EAAKN,QAAgBM,EAAKN,OAAS,IAElCqB,EAASE,MAAMC,QAAU,eACzBC,EAAgBJ,EAAS,KACzBA,EAASE,MAAMG,gBAAkB,qBAEjCL,EAASM,SAAS,GAAGC,UAAY,gDAE7BX,EAAEY,cAAcC,aAAa,aAEjC/B,aAAagC,QAAQd,EAAEY,cAAcC,aAAa,YAAYxB,GAE9D0B,OAAOC,SAASC,WAIhBnC,aAAagC,QAAQI,IAAc7B,GAEnC0B,OAAOC,SAASC,WAKlBpB,EAAqB,SAACG,GAExB,IAAMmB,EAAUnB,EAAEY,cAAcC,aAAa,gBAC7C/B,aAAasC,WAAWD,GAExBJ,OAAOC,SAASC,UAIdxB,EAAmB,SAACO,GAELC,SAASI,cAAc,gBAAxC,IAEMc,EAAUnB,EAAEY,cAAcC,aAAa,iBAEvCxB,EAAOW,EAAEY,cAAcC,aAAa,YAE1CZ,SAASC,eAAe,WAAWC,MAAQd,EAG3C,IAAMgC,EAAUpB,SAASI,cAAc,WACvCgB,EAAQV,UAAY,OACpBU,EAAQf,MAAMG,gBAAkB,QAEhCY,EAAQC,aAAa,WAAWH,IAI9BjC,EAAiB,WAEnBJ,aAAayC,QAEbR,OAAOC,SAASC,UAIdT,EAAkB,SAACgB,EAAMC,GAC3BC,YAAW,kBAAMF,EAAMlB,MAAMC,QAAU,SAAQkB,IAI7CP,EAAc,WAGhB,IAFA,IAAMS,EAAQ,uDACVtC,EAAO,GACHuC,EAAI,EAAGA,EAFoE,EAEpDA,IAAI,CAC/B,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWL,EAAM5C,QAChDM,GAAQsC,EAAMM,UAAUJ,EAASA,EAAS,GAE9C,OAAOxC,GAGI6C,EAlID,WAGV,IADA,IAAIC,EAAQ,GACJP,EAAI,EAAGA,EAAI9C,aAAaC,OAAQ6C,IACpCO,EAAMC,KAAK,cAAC,EAAD,CAAc/C,KAAMP,aAAauD,QAAQvD,aAAawD,IAAIV,IAAKrC,SAAUT,aAAawD,IAAIV,IAA/EA,IAE1B,OACI,qCACI,sBAAK5C,UAAU,WAAf,UACI,sBAAKA,UAAU,SAAf,UACI,uBAAOuD,KAAK,OAAOC,GAAG,UAAUxD,UAAU,UAAUyD,YAAY,uBAChE,wBAAQzD,UAAU,SAASC,QAASc,EAApC,oBAEJ,qBAAKf,UAAU,cAAf,SACI,2BAIJmD,EAAMO,KAAI,SAAAC,GAAC,OAAIA,KAEnB,cAAC,EAAD,QC9BGC,MAJf,WACE,OAAO,cAAC,EAAD,KCATC,IAASC,OAAO,cAAC,EAAD,IAAQ7C,SAASC,eAAe,W","file":"static/js/main.bf779cca.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n// first I'm gonna create an espace to the client to create new names and add it to localStorage\r\n// I'll create random key for every name with length of 7 to create new name each time\r\n// display an error message if the name is not validated\r\n// second I'll get a the list from locale sotrage\r\n// for delete button I'll delete the button by deleting the key in localStorage\r\n// edit will set the name in the input above, also the button \"add\" will be changed to \"Edit\"\r\n// then I'll send an attribute \"key\" with Edit function to see if the value of the input is coming from edit button or not\r\n// so if is come from edit button I'll use the same key in setItem function to update the name, if not I'll use random name\r\n// the page will be reloaded each time to see the changes\r\n// clear all will clear all the localstorage keys\r\n\r\n\r\nconst Cruid = () =>{\r\n    // get names from localStorage\r\n    let names = [];\r\n    for(let i = 0; i < localStorage.length; i++){\r\n        names.push(<List key={i} name={localStorage.getItem(localStorage.key(i))} key_name={localStorage.key(i)} />);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"divAbove\">\r\n                <div className=\"divInp\">\r\n                    <input type=\"text\" id=\"inpName\" className=\"inpName\" placeholder=\"Enter name here...\"/>\r\n                    <button className=\"btnAdd\" onClick={handleAddClick}>Add</button>\r\n                </div>\r\n                <div className=\"divMsgAlert\">\r\n                    <p></p>\r\n                </div>\r\n            </div>\r\n            {\r\n                names.map(v => v)\r\n            }\r\n            <MsgEmptyOrClear />\r\n        </>\r\n    )\r\n}\r\n    \r\n/* check if the localstorage is empty or not, if it's empty display message to add names,\r\nif it's not display clear all button */\r\nconst MsgEmptyOrClear = () => {\r\n    if(localStorage.length > 0){\r\n        return <button className=\"btnClearAll\" onClick={handleClearAll}>Clear All Names</button>;\r\n    }\r\n    else return <h3 className=\"h3Empty\">Your list is empty!</h3>\r\n}\r\n\r\n// list raw\r\nconst List = (props) => {\r\n    return (\r\n        <>\r\n            <div className=\"divList\">\r\n                <p>{props.name}</p>\r\n                <button className=\"btnEdit\" edit_key_name={props.key_name} val_name={props.name} onClick={handleButtonEdit}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </button>\r\n                <button className=\"btnDelete\" del_key_name={props.key_name} onClick={handleButtonDelete}>\r\n                    <FontAwesomeIcon icon={faTrashAlt}/>\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// Add name\r\nconst handleAddClick = (e) => {\r\n    const name = document.getElementById(\"inpName\").value;\r\n    const msgAlert = document.querySelector(\".divMsgAlert\");\r\n    // value validation\r\n    if(name.length === 0 || name.length > 30){\r\n        // display the err message\r\n        msgAlert.style.display = \"inline-block\";\r\n        displayOffAlert(msgAlert,5000)\r\n        msgAlert.style.backgroundColor = \"rgb(255, 170, 170)\";\r\n        // add a custom text to the p tag of this div\r\n        msgAlert.children[0].innerHTML = \"Name should contains between 0-30 character!\";\r\n    }\r\n    else if(e.currentTarget.getAttribute(\"key_name\")){\r\n        // set new name for the same key to be apdated\r\n        localStorage.setItem(e.currentTarget.getAttribute(\"key_name\"),name);\r\n        // reload the page to see the changes\r\n        window.location.reload();\r\n    }\r\n    else{\r\n        // insert new value in local sotrage\r\n        localStorage.setItem(genRandName(),name);\r\n        // reload the page\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\n// delete name\r\nconst handleButtonDelete = (e) => {\r\n    // get the key of the item in localstorag, i stored it as an attribute of the button\r\n    const keyName = e.currentTarget.getAttribute(\"del_key_name\");\r\n    localStorage.removeItem(keyName);\r\n    // reload to see he changes\r\n    window.location.reload();\r\n}\r\n\r\n// edit name\r\nconst handleButtonEdit = (e) => {\r\n    // the box of errors if the name is not validated\r\n    const msgAlert = document.querySelector(\".divMsgAlert\");\r\n    // the key of the item which would be change\r\n    const keyName = e.currentTarget.getAttribute(\"edit_key_name\");\r\n    // the name which will be changed\r\n    const name = e.currentTarget.getAttribute(\"val_name\");\r\n    // set the input value to equal the name to make edit it\r\n    document.getElementById(\"inpName\").value = name;\r\n    // console.log(inp);\r\n    // change the button add to edit\r\n    const btnEdit = document.querySelector(\".btnAdd\");\r\n    btnEdit.innerHTML = \"Edit\";\r\n    btnEdit.style.backgroundColor = \"green\";\r\n    // add an attribute to store on it the name key (I'll use it above to check if it's new name or an existing name)\r\n    btnEdit.setAttribute(\"key_name\",keyName);\r\n}\r\n\r\n// clear all\r\nconst handleClearAll = () => {\r\n    // clear all key from localstorage\r\n    localStorage.clear();\r\n    // realoed to see the changes\r\n    window.location.reload();\r\n}\r\n\r\n// display off the alert msg after specific time\r\nconst displayOffAlert = (elmnt,periode) => {\r\n    setTimeout(() => elmnt.style.display = \"none\", periode)\r\n}\r\n\r\n// generate new name to use it as a key in localstorage\r\nconst genRandName = () => {\r\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz_\", nameLength = 6;\r\n    let name = \"\";\r\n    for(let i = 0; i < nameLength; i++){\r\n        let randChar = Math.floor(Math.random() * chars.length);\r\n        name += chars.substring(randChar,randChar+1)\r\n    }\r\n    return name;\r\n}\r\n\r\nexport default Cruid; ","import React from \"react\";\nimport Cruid from \"./insertUpdate\";\n\nfunction App(){\n  return <Cruid />\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />,document.getElementById(\"root\"));"],"sourceRoot":""}